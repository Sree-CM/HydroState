# Plot Viterbi states
viterbi(best.model)
testing<-viterbi(best.model)
load("C:/UserData/cheramps/Downloads/my_rda_410734")
View(all.Models)
View(testing)
View(all.Models)
load("C:/UserData/cheramps/OneDrive - Australian National University/R/working _direct/fire models/Results/fire_model&results_updated/models&pdf/my_rda_410733")
getAIC.bestModel(all.Models)
getAIC.bestModel(all.Models,use.sampleSize.penality=T)
getAIC.bestModel(all.Models,use.sampleSize.penality=F)
load("C:/UserData/cheramps/OneDrive - Australian National University/R/working _direct/fire models/Results/fire_models-updatd calibration/my_rda_410711")
load("C:/UserData/cheramps/OneDrive - Australian National University/R/working _direct/fire models/Results/fire_model&results_updated/models&pdf/my_rda_410711")
getAIC.bestModel(all.Models)
View(all.Models)
getAIC.bestModel(all.Models)
getAIC.bestModel(all.Models,use.sampleSize.penality=F)
getAIC.bestModel(all.Models,use.sampleSize.penality=T)
getAIC.bestModel(all.Models,use.sampleSize.penality=T)
getAIC.bestModel(all.Models,use.sampleSize.penality=F)
load("C:/UserData/cheramps/OneDrive - Australian National University/R/working _direct/fire models/Results/fire_model&results_updated/models&pdf/my_rda_410731")
load("C:/UserData/cheramps/OneDrive - Australian National University/R/working _direct/fire models/Results/fire_model&results_updated/models&pdf/my_rda_410776")
getAIC.bestModel(all.Models)
getAIC.bestModel(all.Models,use.sampleSize.penality=T)
getAIC.bestModel(all.Models,use.sampleSize.penality=F)
load("C:/UserData/cheramps/OneDrive - Australian National University/R/working _direct/fire models/Results/fire_model&results_updated/models&pdf/my_rda_410731")
getAIC.bestModel(all.Models)
getAIC.bestModel(all.Models,use.sampleSize.penality=T)
getAIC.bestModel(all.Models,use.sampleSize.penality=F)
load("C:/UserData/cheramps/OneDrive - Australian National University/R/working _direct/wfh_wd/my_rda_410731_1000its")
getAIC.bestModel(all.Models,use.sampleSize.penality=T)
export(hydroState.fire.allModels)
namespaceExport(ns, exports)
debugSource("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/annual_sum_fire_16.models.R", echo=TRUE)
# Build all combinations of annual models for this gauge.
all.Models <- new('hydroState.fire.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
# Build all combinations of annual models for this gauge.
all.Models <- new('hydroState.fire.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
#all.Models <- new('hydroState.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
# Calibrate (using MLW) each of the models.
all.Models <- fit(all.Models, pop.size.perParameter=75, max.generations=10000, reltol=1e-8,steptol=50, doParallel=F)
#all.Models <- new('hydroState.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
# Calibrate (using MLW) each of the models.
all.Models <- fit(all.Models, pop.size.perParameter=75, max.generations=10000, reltol=1e-8,steptol=50, doParallel=F)
# Build all combinations of annual models for this gauge.
all.Models <- new('hydroState.fire.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
#all.Models <- new('hydroState.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
# Calibrate (using MLW) each of the models.
all.Models <- fit(all.Models, pop.size.perParameter=75, max.generations=10000, reltol=1e-8,steptol=50, doParallel=F)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/wfh_wd/my_rda_410733")
getAIC.bestModel(all.Models)
getAICc(best.model)
getAIC(best.model)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/FSES computer/additional_gauges/models_fire_410776.RData")
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/FSES computer/additional_gauges/addtional_rda_data_410790")
getAIC.bestModel(all.Models)
getAIC(all.Models)
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models)
getAIC(best.model)
getAIC(all.Models@models$model.2State.log.AR1)
best.model
View(best.model)
getAIC(best.model$model)
getAICc(best.model$model)
getAIC.bestModel(all.Models,use.sampleSize.penality=T)
getAIC.bestModel(all.Models,use.sampleSize.penality=F)
getAIC(best.model$model)
getAICc(best.model$model)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/wfh_wd/my_rda_410730")
getAIC(best.model)
getAICc(best.model)
getAIC.bestModel(all.Models)
getAIC.bestModel(all.Models,use.sampleSize.penality=F)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/Results/fire_model&results_updated/models&pdf/my_rda_410711")
getAIC.bestModel(all.Models)
View(best.model)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/wfh_wd/my_rda_410730")
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models,use.sampleSize.penality=F)
# Name the states names with 1990 being defined as a 'normal' runoff year.
best.model <- setStateNames(best.model[["model"]], c(1990,1991,1989,1992,1993,1987,1986,1985))
# Plot Viterbi states
viterbi(best.model)
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models,use.sampleSize.penality=F,min.obs.per.state=2)
# Name the states names with 1990 being defined as a 'normal' runoff year.
best.model <- setStateNames(best.model[["model"]], c(1990,1991,1989,1992,1993,1987,1986,1985))
# Plot Viterbi states
viterbi(best.model)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/wfh_wd/my_rda_410731")
getAIC.bestModel(all.Models)
best.model = getAIC.bestModel(all.Models)
# Name the states names with 1990 being defined as a 'normal' runoff year.
best.model <- setStateNames(best.model[["model"]], c(1990,1991,1989,1992,1993,1987,1986,1985))
# Plot Viterbi states
viterbi(best.model)
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models,use.sampleSize.penality=F)
# Name the states names with 1990 being defined as a 'normal' runoff year.
best.model <- setStateNames(best.model[["model"]], c(1990,1991,1989,1992,1993,1987,1986,1985))
# Plot Viterbi states
viterbi(best.model)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/wfh_wd/my_rda_410734")
# Plot Viterbi states
viterbi(best.model)
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models,use.sampleSize.penality=F)
# Name the states names with 1990 being defined as a 'normal' runoff year.
best.model <- setStateNames(best.model[["model"]], c(1990,1991,1989,1992,1993,1987,1986,1985))
# Plot Viterbi states
viterbi(best.model)
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models,use.sampleSize.penality=F,min.obs.per.state=2)
# Name the states names with 1990 being defined as a 'normal' runoff year.
best.model <- setStateNames(best.model[["model"]], c(1990,1991,1989,1992,1993,1987,1986,1985))
# Plot Viterbi states
viterbi(best.model)
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models,use.sampleSize.penality=F,min.obs.per.state=2)
best.model <- setStateNames(best.model[["model"]], c(1975))
# Plot Viterbi states
viterbi(best.model)
best.model <- setStateNames(best.model[["model"]], c(1991,1992))
best.model <- setStateNames(best.model[["model"]], c(1975))
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models,use.sampleSize.penality=F,min.obs.per.state=2)
best.model <- setStateNames(best.model[["model"]], c(1991,1992))
# Plot Viterbi states
viterbi(best.model)
best.model <- setStateNames(best.model[["model"]], c(1988))
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models,use.sampleSize.penality=F,min.obs.per.state=2)
best.model <- setStateNames(best.model[["model"]], c(1988))
# Plot Viterbi states
viterbi(best.model)
View(all.Models)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/wfh_wd/my_rda_410774")
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models,use.sampleSize.penality=F)
# Name the states names with 1990 being defined as a 'normal' runoff year.
best.model <- setStateNames(best.model[["model"]], c(1990,1991,1989,1992,1993,1987,1986,1985))
# Plot Viterbi states
viterbi(best.model)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/wfh_wd/my_rda_410731_1000its")
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models,use.sampleSize.penality=F)
# Plot Viterbi states
viterbi(best.model)
# Name the states names with 1990 being defined as a 'normal' runoff year.
best.model <- setStateNames(best.model[["model"]], c(1990,1991,1989,1992,1993,1987,1986,1985))
# Plot Viterbi states
viterbi(best.model)
# Name the states names with 1990 being defined as a 'normal' runoff year.
best.model <- setStateNames(best.model[["model"]], c(1990,1993))
# Select the best model (byt AIC)
best.model = getAIC.bestModel(all.Models,use.sampleSize.penality=F)
# Name the states names with 1990 being defined as a 'normal' runoff year.
best.model <- setStateNames(best.model[["model"]], c(1990,1993))
# Plot Viterbi states
viterbi(best.model)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/wfh_wd/my_rda_410734")
getAIC.bestModel(all.Models)
getAIC.bestModel(all.Models,use.sampleSize.penality=F)
getAIC.bestModel(all.Models,use.sampleSize.penality=T)
getAIC.bestModel(all.Models)
getParameters.asVector(all.Models@models$model.1State.gamma.BC)
# Build all combinations of annual models for this gauge.
all.Models <- new('hydroState.fire.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
debugSource("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/annual_sum_fire_16.models.R", echo=TRUE)
# Build all combinations of annual models for this gauge.
all.Models <- new('hydroState.fire.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
#all.Models <- new('hydroState.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
# Calibrate (using MLW) each of the models.
all.Models <- fit(all.Models, pop.size.perParameter=75, max.generations=10000, reltol=1e-8,steptol=50, doParallel=F)
# Build all combinations of annual models for this gauge.
all.Models <- new('hydroState.fire.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
# Build all combinations of annual models for this gauge.
all.Models <- new('hydroState.fire.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
# Build all combinations of annual models for this gauge.
all.Models <- new('hydroState.fire.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
# Build all combinations of annual models for this gauge.
all.Models <- new('hydroState.fire.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
# Build all combinations of annual models for this gauge.
all.Models <- new('hydroState.fire.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
#all.Models <- new('hydroState.allModels',as.character(gaugeID), streamflow_annual, allow.flickering=F)
# Calibrate (using MLW) each of the models.
all.Models <- fit(all.Models, pop.size.perParameter=75, max.generations=10000, reltol=1e-8,steptol=50, doParallel=F)
as.numeric(c(state.dependent.mean.a0, state.dependent.mean.a1, state.dependent.std.a0,0,0,0))
as.numeric(c(0,0,0))
as.numeric(c(1,1,1))
debugSource("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/annual_sum_fire_FSES_individual.R", echo=TRUE)
debugSource("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/annual_sum_fire_16.models.R", echo=TRUE)
QhatModel.1State = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.1State)
# Note a 2-state linear model with first-order serial correlation is built. A truncated normal distribution is used for
# each Markov state.
# Define transition graphs
transition.graph.1State <- matrix(TRUE,1,1)
transition.graph.2State <- matrix(TRUE,2,2)
transition.graph <- matrix(TRUE,2,2)
Qhat = new('Qhat.boxcox', input.data=streamflow_annual)
QhatModel.1State = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.1State)
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
# Build Markov model object
markov.1State = new('markov.annualHomogeneous', transition.graph=transition.graph.1State)
markov.2State = new('markov.annualHomogeneous', transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.Kuczera = setStateNames(model.2State.Kuczera, c(1990,1991,1989,1992,1993,1987,1986,1985))
viterbi(model.2State.Kuczera)
hydroState:::getKuczera(model.2State.Kuczera)
hydroState:::getKuczera(model.2State.Kuczera)
hydroState:::generate.sample.Qhat(model.2State.Kuczera)
hydroState:::getKuczera(model.2State.Kuczera)
hydroState:::getDistributionPercentiles(model.2State.Kuczera,model.2State.Kuczera@input.data)
hydroState:::getDistributionPercentiles(model.2State.Kuczera,model.2State.Kuczera@input.data,0.5)
model.2State.Kuczera@QhatModel.object@parameters@values
#evaluating Kuczera impact using different code
Q.fire= viterbi(model.2State.Kuczera)
model.2State.Kuczera @QhatModel.object@parameters@values$Kuczera.Lmax =0
Q.fire.off = viterbi(model.2State.Kuczera)
deltaQ.fire = Q.fire[,5] - Q.fire.off[,5]
plot(Q.fire[,1],deltaQ.fire)
View(Q.fire)
View(Q.fire.off)
View(Q.fire)
model.2State.Kuczera @QhatModel.object@parameters@values$Kuczera.Lmax
model.2State.Kuczera @QhatModel.object@parameters@values$Kuczera.tlag
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 25,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.Kuczera @QhatModel.object@parameters@values$Kuczera.Lmax
model.2State.Kuczera <-setStateNames(model.2State.Kuczera, c(1990,1991,1989,1992,1993,1987,1986,1985))
# Plot Viterbi states
viterbi(best.model)
# Plot Viterbi states
viterbi(model.2State.Kuczera)
QhatModel.2state.AR1.Kuczera  = new('QhatModel.homo.normal.linear.AR1.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
QhatModel.2state.AR1.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 25,max.generations = 200,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera)
QhatModel.2state.AR1.Kuczera  = new('QhatModel.homo.normal.linear.AR1.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.AR1.Kuczera = new('hydroState',input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.AR1.Kuczera, markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.AR1.Kuczera <- hydroState::fit(model.2State.AR1.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.AR1.Kuczera)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/modified_hydrostate_fire_16models/Hydrostate_mod/HydroState/models_fire_410730.RData")
hydroState:::getKuczera(model.2State.AR1.Kuczera)
hydroState:::getKuczera(model.2State.Kuczera)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/modified_hydrostate_fire_16models/Hydrostate_mod/HydroState/models_fire_410733.RData")
hydroState:::getKuczera(model.1State.AR2.Kuczera)
rm(list=ls())
library(hydroState)
library(DEoptim)
library(truncnorm)
# Load flow data
location <- "C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/Data Collection/Project/Transformed Data/Monthly-yearly/R format/test_16042024/streamflow_annual.csv"
df2 <- read.csv(location)
#data(streamflow_annual)
head(streamflow_annual)
# Extract one catchment
gaugeID = 410734;
streamflow_annual = df2[df2$gauge==gaugeID,]
# Convert to format for hydroState
streamflow_annual = data.frame(year = streamflow_annual$hy_year, flow=streamflow_annual$q, precipitation=streamflow_annual$p, fire=streamflow_annual$fire)
filt = streamflow_annual$year>=1900
streamflow_annual = streamflow_annual[filt,]
# Note a 2-state linear model with first-order serial correlation is built. A truncated normal distribution is used for
# each Markov state.
# Define transition graphs
transition.graph.1State <- matrix(TRUE,1,1)
transition.graph.2State <- matrix(TRUE,2,2)
transition.graph <- matrix(TRUE,2,2)
Qhat = new('Qhat.boxcox', input.data=streamflow_annual)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.normal.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
# Build Markov model object
markov.1State = new('markov.annualHomogeneous', transition.graph=transition.graph.1State)
markov.2State = new('markov.annualHomogeneous', transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
load("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/modified_hydrostate_fire_16models/Hydrostate_mod/HydroState/models_fire_410711.RData")
hydroState:::getKuczera(model.2State.AR1.Kuczera@QhatModel.object)
debugSource("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/annual_sum_fire_16.models.R", echo=TRUE)
# Note a 2-state linear model with first-order serial correlation is built. A truncated normal distribution is used for
# each Markov state.
# Define transition graphs
transition.graph.1State <- matrix(TRUE,1,1)
transition.graph.2State <- matrix(TRUE,2,2)
transition.graph <- matrix(TRUE,2,2)
Qhat = new('Qhat.boxcox', input.data=streamflow_annual)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
# Build Markov model object
markov.1State = new('markov.annualHomogeneous', transition.graph=transition.graph.1State)
markov.2State = new('markov.annualHomogeneous', transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
QhatModel.2state.AR1.Kuczera  = new('QhatModel.homo.normal.linear.AR1.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.AR1.Kuczera = new('hydroState',input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.AR1.Kuczera, markov.model.object=markov.2State)
model.2State.AR1.Kuczera <- hydroState::fit(model.2State.AR1.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.AR1.Kuczera@QhatModel.object)
model.2State.AR1.Kuczera <- hydroState::fit(model.2State.AR1.Kuczera,pop.size.perParameter = 75,max.generations = 1000,reltol=1e-8,steptol=50)
# Extract one catchment
gaugeID = 410730;
streamflow_annual = df2[df2$gauge==gaugeID,]
debugSource("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/annual_sum_fire_16.models.R", echo=TRUE)
# Note a 2-state linear model with first-order serial correlation is built. A truncated normal distribution is used for
# each Markov state.
# Define transition graphs
transition.graph.1State <- matrix(TRUE,1,1)
transition.graph.2State <- matrix(TRUE,2,2)
transition.graph <- matrix(TRUE,2,2)
Qhat = new('Qhat.boxcox', input.data=streamflow_annual)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
# Build Markov model object
markov.1State = new('markov.annualHomogeneous', transition.graph=transition.graph.1State)
markov.2State = new('markov.annualHomogeneous', transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
QhatModel.2state.AR3.Kuczera  = new('QhatModel.homo.normal.linear.AR3.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.AR3 = new('hydroState',input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2State.AR3, markov.model.object=markov.2State)
model.2State.AR3.Kuczera = new('hydroState',input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.AR3.Kuczera, markov.model.object=markov.2State)
model.2State.AR3.Kuczera <- hydroState::fit(model.2State.AR3.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.AR3.Kuczera@QhatModel.object)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
View(model.2State.Kuczera)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
debugSource("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/annual_sum_fire_16.models.R", echo=TRUE)
# Note a 2-state linear model with first-order serial correlation is built. A truncated normal distribution is used for
# each Markov state.
# Define transition graphs
transition.graph.1State <- matrix(TRUE,1,1)
transition.graph.2State <- matrix(TRUE,2,2)
transition.graph <- matrix(TRUE,2,2)
Qhat = new('Qhat.boxcox', input.data=streamflow_annual)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
# Build Markov model object
markov.1State = new('markov.annualHomogeneous', transition.graph=transition.graph.1State)
markov.2State = new('markov.annualHomogeneous', transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 25,max.generations = 100,reltol=1e-8,steptol=50)
traceback()
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 25,max.generations = 100,reltol=1e-8,steptol=50)
traceback()
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 25,max.generations = 1000,reltol=1e-8,steptol=50)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
#evaluating Kuczera impact using different code
Q.fire= viterbi(model.2State.Kuczera)
model.2State.Kuczera = setStateNames(model.2State.Kuczera, c(1990,1991,1989,1992,1993,1987,1986,1985))
#evaluating Kuczera impact using different code
Q.fire= viterbi(model.2State.Kuczera)
model.2State.Kuczera @QhatModel.object@parameters@values$Kuczera.Lmax =0
Q.fire.off = viterbi(model.2State.Kuczera)
deltaQ.fire = Q.fire[,5] - Q.fire.off[,5]
plot(Q.fire[,1],deltaQ.fire)
hydroState:::generate.sample.Qhat(model.2State.Kuczera@QhatModel.object,model.2State.Kuczera@input.data,2)
hydroState:::generate.sample.Qhat(model.2State.Kuczera@QhatModel.object,model.2State.Kuczera@input.data,3)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
QhatModel.2state.AR1.Kuczera  = new('QhatModel.homo.normal.linear.AR1.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.AR1.Kuczera = new('hydroState',input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.AR1.Kuczera, markov.model.object=markov.2State)
model.2State.AR1.Kuczera <- hydroState::fit(model.2State.AR1.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.AR1.Kuczera@QhatModel.object)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
model.2State.Kuczera = setStateNames(model.2State.Kuczera, c(1990,1991,1989,1992,1993,1987,1986,1985))
#evaluating Kuczera impact using different code
Q.fire= viterbi(model.2State.Kuczera)
Q.fire.off = viterbi(model.2State.Kuczera)
deltaQ.fire = Q.fire[,5] - Q.fire.off[,5]
plot(Q.fire[,1],deltaQ.fire)
hydroState:::getKuczera(model.2State.AR1.Kuczera@QhatModel.object)
getMethod("getMean", "hydrostate")
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
showMethods()
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
model.2State.Kuczera@QhatModel.object@parameters@values
hydroState:::generate.sample.Qhat(model.2State.Kuczera@Qhat.object,model.2State.Kuczera@input.data,3)
hydroState:::generate.sample.Qhat(model.2State.Kuczera@QhatModel.object@,model.2State.Kuczera@input.data,3)
hydroState:::generate.sample.Qhat(model.2State.Kuczera@QhatModel.object,model.2State.Kuczera@input.data,3)
hydroState:::generate.sample.Qhat(model.2State.Kuczera@QhatModel.object,model.2State.Kuczera@QhatModel.object@input.data,3)
hydroState:::generate.sample.Qhat(model.2State.Kuczera@QhatModel.object,streamflow_annual,3)
getMethod("getKuczera", "QhatModel.homo.gamma.linear.fire")
showMethods("QhatModel.homo.gamma.linear.fire")
showMethods("QhatModel.homo.gamma.linear")
showMethods("getKuczera")
getClass(QhatModel.homo.gamma.linear.fire)
getClass("QhatModel.homo.gamma.linear.fire")
hydroState:::getMean(model.2State.Kuczera@QhatModel.object,streamflow_annual)
getMethod("getMean", "QhatModel.homo.gamma.linear.fire")
getMethod("getMean", "QhatModel.homo.gamma.linear")
getMethod("getMean", "QhatModel.homo.normal.linear")
getAnywhere("getMean")
methods("getMean")
showMethods("getMean")
getMethod("getMean", "ANY")
getAnywhere("getMean")
getMean
getMean()
getMethods("getMean")
?MethodsList
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
View(model.2State.Kuczera)
help(.Machine$double.eps)
help(double.eps)
??double.eps
model.2State.AR1.Kuczera <- hydroState::fit(model.2State.AR1.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
QhatModel.2state.AR1.Kuczera  = new('QhatModel.homo.normal.linear.AR1.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
QhatModel.2state.AR1.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.AR1.Kuczera = new('hydroState',input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.AR1.Kuczera, markov.model.object=markov.2State)
model.2State.AR1.Kuczera <- hydroState::fit(model.2State.AR1.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
QhatModel.2state.AR1.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.AR1.Kuczera = new('hydroState',input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.AR1.Kuczera, markov.model.object=markov.2State)
model.2State.AR1.Kuczera <- hydroState::fit(model.2State.AR1.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.AR1.Kuczera <- hydroState::fit(model.2State.AR1.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.AR1.Kuczera <- hydroState::fit(model.2State.AR1.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.AR1.Kuczera <- hydroState::fit(model.2State.AR1.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.AR1.Kuczera <- hydroState::fit(model.2State.AR1.Kuczera,pop.size.perParameter = 75,max.generations = 100,reltol=1e-8,steptol=50)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 15,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
hydroState:::getMean(model.2State.Kuczera@QhatModel.object)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 15,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 15,max.generations = 100,reltol=1e-8,steptol=50)
debugSource("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/annual_sum_fire_16.models.R", echo=TRUE)
# Note a 2-state linear model with first-order serial correlation is built. A truncated normal distribution is used for
# each Markov state.
# Define transition graphs
transition.graph.1State <- matrix(TRUE,1,1)
transition.graph.2State <- matrix(TRUE,2,2)
transition.graph <- matrix(TRUE,2,2)
Qhat = new('Qhat.boxcox', input.data=streamflow_annual)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
# Build Markov model object
markov.1State = new('markov.annualHomogeneous', transition.graph=transition.graph.1State)
markov.2State = new('markov.annualHomogeneous', transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 15,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
showMethods("QhatModel.homo.gamma.linear.fire")
showMethods(QhatModel.homo.gamma.linear.fire)
getMethod(getKuczera, signature = QhatModel.homo.gamma.linear.fire)
getMethod(getMean, signature = QhatModel.homo.gamma.linear.fire)
getMethod(getEmissionDensity, signature = QhatModel.homo.gamma.linear.fire)
str(QhatModel.2state.Kuczera)
model.2State.Kuczera@input.data
getMethod(getMean, signature = model.2State.Kuczera)
getMethod(getKuczera, signature = model.2State.Kuczera)
getMethod(getAIC.bestModel, signature = model.2State.Kuczera)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
#2-state models
QhatModel.2state.Kuczera  = new('QhatModel.homo.gamma.linear.fire', input.data=streamflow_annual, transition.graph=transition.graph.2State)
model.2State.Kuczera = new('hydroState',    input.data=streamflow_annual, Qhat.object = Qhat, QhatModel.object = QhatModel.2state.Kuczera    , markov.model.object=markov.2State)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 15,max.generations = 100,reltol=1e-8,steptol=50)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
hydroState:::getKuczera(model.2State.Kuczera)
debugSource("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/fire.gamma.models.test.R", echo=TRUE)
hydroState:::getKuczera(model.2State.Kuczera@QhatModel.object)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 15,max.generations = 100,reltol=1e-8,steptol=50)
debugSource("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/fire.gamma.models.test.R", echo=TRUE)
debug()
debug(model.2State.Kuczera)
debug(model.2State.Kuczera)
debugSource("C:/Users/shonn/Desktop/Sree_ANU_Onedrive/OneDrive - Australian National University/R/working _direct/fire models/fire.gamma.models.test.R", echo=TRUE)
debugSource("C:/UserData/cheramps/OneDrive - Australian National University/R/working _direct/fire models/fire.gamma.models.test.R")
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 15,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 15,max.generations = 100,reltol=1e-8,steptol=50)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 5,max.generations = 20,reltol=1e-8,steptol=50)
gc()
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 5,max.generations = 20,reltol=1e-8,steptol=50)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 5,max.generations = 20,reltol=1e-8,steptol=50)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 5,max.generations = 20,reltol=1e-8,steptol=50)
model.2State.Kuczera <-hydroState::fit(model.2State.Kuczera,pop.size.perParameter = 5,max.generations = 20,reltol=1e-8,steptol=50)
model.2State.Kuczera@input.data
